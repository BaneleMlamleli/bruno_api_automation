meta {
  name: Booking - PartialUpdateBooking
  type: http
  seq: 7
}

patch {
  url: https://restful-booker.herokuapp.com/booking/?id=1
  body: json
  auth: none
}

params:query {
  id: 1
}

headers {
  Accept: application/json
  Content-Type: application/json
  Cookie: token=YWRtaW46cGFzc3dvcmQxMjM=
}

body:json {
  {
    "firstname": "James",
    "lastname": "Brown"
  }
}

script:pre-request {
  const { faker } = require('@faker-js/faker');
  
  // Set the environment variables for the request
  bru.setEnvVar("firstname", faker.person.firstName());
  bru.setEnvVar("lastname", faker.person.lastName());
}

tests {
  const chai = require('chai');
  const { expect } = chai;
  
  // TC01, TC02: Verify Required Headers are Present
  /**
   * Test Case: Verify headers are present and valid
   * 
   * This test checks that the response contains the required HTTP headers:
   * - 'content-type' header includes 'application/json'
   * - 'server' header is present and is a string
   * - 'connection' header is present and equals 'keep-alive'
   */
  test("Verify headers are present and valid", () => {
    expect(res.headers).to.have.property('content-type').that.includes('text/plain');
    expect(res.headers).to.have.property('server').that.is.a('string');
    // expect(res.headers).to.have.property('connection').that.equals('keep-alive');
  });
  
  /**
   * TC06: Verify API Response Status Code
   * This test checks that the API response status code is 200, indicating a successful request.
   */
  test("Verify response code is 200", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  /**
   * TC04, TC07: Verify Accept Header for Response Format
   * This test ensures that the API respects the Accept header by returning a JSON response with the
   * correct content-type and that the response body is an object.
   */
  test("Verify Accept header is respected for TEXT response format", () => {
    expect(res.headers['content-type']).to.include('text/plain');
    expect(res.body).to.be.an('object');
  });
    
  /**
   * TC08, TC09: Verify that the API response contains all the expected fields
   * This test verifies that the API response includes all fields with their data types and the response body is an object.
   */
  test("Verify that the API response contains all the expected fields", () => {
    expect(res.body).to.be.an('object');
    expect(res.body).to.have.property('firstname').that.is.a('string');
    expect(res.body).to.have.property('lastname').that.is.a('string');
    expect(res.body).to.have.property('totalprice').that.is.a('number');
    expect(res.body).to.have.property('depositpaid').that.is.a('boolean');
    expect(res.body.bookingdates).to.be.an('object');
    expect(res.body.bookingdates).to.have.property('checkin').that.is.a('string');
    expect(res.body.bookingdates).to.have.property('checkout').that.is.a('string');
    expect(res.body).to.have.property('additionalneeds').that.is.a('string');
  });
  
  /**
   * TC10: Verify that the API response time is within acceptable limits
   * This test asserts that the API response time does not exceed the maximum allowed
   * threshold (5 seconds).
   */
  test("Verify response time is within acceptable limits", () => {
    const maxResponseTime = 5000;
    expect(res.getResponseTime()).to.be.lessThan(maxResponseTime);
  });
  
  /**
   * TC12: Verify that the API request method is correct (e.g. GET, POST, PUT, DELETE)
   * This test checks that the HTTP request method used is PATCH.
   */
  test("Verify request method is PATCH", () => {
    expect(req.method).to.equal('PATCH');
  });  
  
  /**
   * TC13: Verify that the API request URL is correct
   * This test verifies that the API request is sent to the correct endpoint URL for authentication.
   */
  test("Verify request URL is correct", () => {
    // TODO: Write code to read the id from the environment variable and concatenate it to the URL
    const id = bru.getEnvVar('id');
    const url = 'https://restful-booker.herokuapp.com/booking/'+id;
    console.log('URL: ', url);
    expect(req.url).to.equal(url);
  });
  
  
  // Directly require the schema JSON file instead of reading with fs
  function getSchema(schemaPath) {
    return require(schemaPath);
  }
  
  /**
   * TC22: Schema validation for successful response
   * This test validates the API response body against the expected JSON schema for a successful token
   * creation response.
   */
  test("Verify response schema", () => {
    const Ajv = require('ajv');
    const ajv = new Ajv();
    const validate = ajv.compile(getSchema('./scripts/schemas/GetBookingIdResponsePayloadSchema.json'));
    const valid = validate(res.body);
    if (!valid) {
      console.log(validate.errors);
    }
    expect(valid).to.be.true;
  });  
  
  // TC15, TC25 : Verify that the API returns a 403 status code for unauthorised request
  test("Schema validation for unauthorised request", () => {
    if(res.status === 403) {
      expect(res.status).to.equal(403);
      expect(res.body.reason).to.equal('Forbidden');
    }
  });
  
  // TC xx: Verify that the API returns a 201 status code for successful partial update
  test("Verify that the API returns a 201 status code for successful partial update", () => {
    expect(res.status).to.equal(201);
    expect(res.body).to.equal('Created');
  });
  
  // TC xx: Verify that the API returns a 405 status code for updating non existing booking
  test("Verify that the API returns a 405 status code for updating non existing booking", () => {
    if(res.status === 405) {
      expect(res.status).to.equal(405);
      expect(res.body.reason).to.equal('Method Not Allowed');
    }
  });

  // TC xx: Verify that the API returns a 400 status code for invalid request
  test("Verify that the API returns a 400 status code for invalid request", () => {
    if(res.status === 400) {
      expect(res.status).to.equal(400);
      expect(res.body.reason).to.equal('Bad Request');
    }
  });
  
  Verify that the API returns a 404 status code for non existing booking
  test("Verify that the API returns a 404 status code for non existing booking", () => {
    if(res.status === 404) {
      expect(res.status).to.equal(404);
      expect(res.body.reason).to.equal('Not Found');
    }
  });

docs {
  Updates a current booking with a partial payload
  'Cookie: token=abc123' can be used as an alternative to the Authorization
}
