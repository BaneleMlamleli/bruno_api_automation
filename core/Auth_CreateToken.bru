meta {
  name: Auth - CreateToken
  type: http
  seq: 1
}

post {
  url: https://restful-booker.herokuapp.com/auth
  body: json
  auth: none
}

body:json {
  {
    "username": "admin",
    "password": "password123"
  }
}

assert {
  res.status: eq 200
}

script:pre-request {
  console.log("pre request");
}

script:post-response {
  bru.setEnvVar("token",res.body.token);
  console.log(req.headers);
}

tests {
  const chai = require('chai');
  const { expect } = chai;
  
  /**
   * Test Case: Verify valid token is generated
   * 
   * This test verifies that the response body contains a valid token with the following criteria:
   * - The response body must have a property named 'token'.
   * - The 'token' property must be a string.
   * - The 'token' must match the regex pattern /^[a-zA-Z0-9]+$/, ensuring it contains only alphanumeric characters.
   * - The 'token' must not be empty, null, undefined, or contain only whitespace.
   * 
   * Additionally, the test logs the generated token to the console for debugging purposes.
   */
  test("Verify a valid token is generated", ()=>{
    expect(res.body).to.have.property('token');
    expect(res.body.token).to.be.a('string');
    expect(res.body.token).to.match(/^[a-zA-Z0-9]+$/);
    expect(res.body.token).to.not.be.empty;
    expect(res.body.token).to.not.equal('null');
    expect(res.body.token).to.not.equal('undefined');
    expect(res.body.token).to.not.equal('');
    expect(res.body.token).to.not.equal(' ');
  });
  
  // TC01, TC02: Verify Required Headers are Present
  test("Verify headers are present and valid", () => {
    expect(res.headers).to.have.property('content-type').that.includes('application/json');
    expect(res.headers).to.have.property('server').that.is.a('string');
    expect(res.headers).to.have.property('connection').that.equals('keep-alive');
  });
  
  // TC06: Verify API Response Status Code
  test("Verify response code is 200", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  // TC04, TC07: Verify Accept Header for Response Format
  test("Verify Accept header is respected for JSON response format", () => {
    expect(res.headers['content-type']).to.include('application/json');
    expect(res.body).to.be.an('object');
  });
  
  // TC08, TC09: Verify that the API response contains all the expected fields
  test("Verify that the API response contains all the expected fields", () => {
    expect(res.body).to.have.property('token');
    expect(res.body.token).to.be.a('string');
    expect(res.body).to.be.an('object');
  });
  
  // TC10: Verify that the API response time is within acceptable limits
  test("Verify response time is within acceptable limits", () => {
    const maxResponseTime = 5000; // 2 seconds
    expect(res.getResponseTime()).to.be.lessThan(maxResponseTime);
  });

  // TC12: Verify that the API request method is correct (e.g. GET, POST, PUT, DELETE)
  test("Verify request method is POST", () => {
    expect(req.method).to.equal('POST');
  });

  // TC13: Verify that the API request URL is correct
  test("Verify request URL is correct", () => {
    expect(req.url).to.equal('https://restful-booker.herokuapp.com/auth');
  });

  // TC00: Verify that the API request body is correct
  test("Verify request body is correct", () => {
    expect(req.body).to.have.property('username').that.equals('admin');
    expect(req.body).to.have.property('password').that.equals('password123');
  });

  // TC14, TC16: Verify that the API returns an error message if the request is malformed
  // Note: Body of the request (payload) is malformed
  test("Verify error message for malformed request", async () => {
    const response = await bru.runRequest("./scripts/malformedrequests/Auth_CreateTokenMalformedRequest.bru");
    expect(response.status).to.equal(400);
    expect(response.statusText).to.equal('Bad Request');
  });

  // TC17: Verify that the API correctly handles cookies and returns the correct HTTP status code
  // test("Verify cookies are handled correctly", () => {
  //   expect(res.headers).to.have.property('set-cookie');
  //   expect(res.headers['set-cookie']).to.be.an('array').that.is.not.empty;
  //   expect(res.headers['set-cookie'][0]).to.include('sessionid');
  // });

  // TC18: Verify that the API correctly handles caching and returns the correct HTTP status code
  // test("Verify caching is handled correctly", () => {
  //   expect(res.headers).to.have.property('cache-control');
  //   expect(res.headers['cache-control']).to.include('no-cache');
  // });

  // TC19: Verify that the API correctly handles cross-site scripting (XSS) attacks and returns the correct HTTP status code
  test("Verify XSS attacks are handled correctly", async () => {
    const response = await bru.runRequest("./scripts/CrossSiteScript/Auth_CreateTokenXSS.bru");
    expect(response.status).to.equal(400);
    expect(response.statusText).to.equals('Bad Request');
  });

  // TC20: Verify that the API correctly handles SQL injection attacks and returns the correct HTTP status code
  test("Verify SQL injection attacks are handled correctly", async () => {
    const response = await bru.runRequest("./scripts/SqlInjection/Auth_CreateTokenSQLInjection.bru");
    expect(response.status).to.equal(400);
    expect(response.statusText).to.equals('Bad Request');
  });
  
  // TC21: Verify that the API correctly handles CSRF attacks and returns the correct HTTP status code
  test("Verify CSRF attacks are handled correctly", async () => {
    const response = await bru.runRequest("./scripts/CSRF/Auth_CreateTokenCSRF.bru");
    expect(response.status).to.equal(400);
    expect(response.statusText).to.equals('Bad Request');
  });

  // Directly require the schema JSON file instead of reading with fs
  function getSchema(schemaPath) {
    return require(schemaPath);
  }

  // TC22: Schema validation for successful response
  test("Verify response schema", () => {
    const Ajv = require('ajv');
    const ajv = new Ajv();
    const validate = ajv.compile(getSchema('./scripts/schemas/Auth_CreateTokenResponseSchema.json'));
    const valid = validate(res.body);
    if (!valid) {
      console.log(validate.errors);
    }
    expect(valid).to.be.true;
  });

  // TC23: Schema validation for request payload      
  test("Verify payload schema", () => {
    const Ajv = require('ajv');
    const ajv = new Ajv();
    const validate = ajv.compile(getSchema('./scripts/schemas/Auth_CreateTokenPayloadSchema.json'));
    const valid = validate(req.body);
    if (!valid) {
      console.log(validate.errors);
    }
    expect(valid).to.be.true;
  });
  
}

docs {
  Creates a new auth token to use for access to the PUT and DELETE /booking
}
