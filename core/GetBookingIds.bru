meta {
  name: Booking - GetBookingIds
  type: http
  seq: 4
}

get {
  url: https://restful-booker.herokuapp.com/booking
  body: none
  auth: none
}


headers {
  Accept: application/json
  Content-Type: application/json
}

tests {
  const chai = require('chai');
  const { expect } = chai;
  
  // TC01, TC02: Verify Required Headers are Present
  /**
   * Test Case: Verify headers are present and valid
   * 
   * This test checks that the response contains the required HTTP headers:
   * - 'content-type' header includes 'application/json'
   * - 'server' header is present and is a string
   * - 'connection' header is present and equals 'keep-alive'
   */
  test("Verify headers are present and valid", () => {
    expect(res.headers).to.have.property('content-type').that.includes('application/json');
    expect(res.headers).to.have.property('server').that.is.a('string');
    // expect(res.headers).to.have.property('connection').that.equals('keep-alive');
  });
  
  /**
   * TC06: Verify API Response Status Code
   * This test checks that the API response status code is 200, indicating a successful request.
   */
  test("Verify response code is 200", function () {
    expect(res.getStatus()).to.equal(200);
  });
  
  /**
   * TC04, TC07: Verify Accept Header for Response Format
   * This test ensures that the API respects the Accept header by returning a JSON response with the
   * correct content-type and that the response body is an object.
   */
  test("Verify Accept header is respected for JSON response format", () => {
    expect(res.headers['content-type']).to.include('application/json');
    expect(res.body).to.be.an('array');
  });
    
  /**
   * TC08, TC09: Verify that the API response contains all the expected fields
   * This test verifies that the API response includes all fields with their data types and the response body is an object.
   */
  test("Verify that the API response contains all the expected fields", () => {
    expect(res.body).to.be.an('array');
    expect(res.body[0]).to.be.an('object');
    expect(res.body[0]).to.have.property('bookingid').that.is.a('number');
  });
  
  /**
   * TC10: Verify that the API response time is within acceptable limits
   * This test asserts that the API response time does not exceed the maximum allowed
   * threshold (5 seconds).
   */
  test("Verify response time is within acceptable limits", () => {
    const maxResponseTime = 5000;
    expect(res.getResponseTime()).to.be.lessThan(maxResponseTime);
  });
  
  /**
   * TC12: Verify that the API request method is correct (e.g. GET, POST, PUT, DELETE)
   * This test checks that the HTTP request method used is GET.
   */
  test("Verify request method is GET", () => {
    expect(req.method).to.equal('GET');
  });
  
  
  /**
   * TC13: Verify that the API request URL is correct
   * This test verifies that the API request is sent to the correct endpoint URL for authentication.
   */
  test("Verify request URL is correct", () => {
    expect(req.url).to.equal('https://restful-booker.herokuapp.com/booking');
  });
    
  /**
   * TC22: Schema validation for successful response
   * N.B. Due to the error message 'Maximum call stack size exceeded' I will no validate the schema for this response as it returns an array all the booking IDs
   */
  
}

docs {
  Returns the IDs of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.
}
